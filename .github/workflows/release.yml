name: Release

on:
  push:
    tags:
      - v*

env:
  DOCKERHUB_REPO: 1panel/kubepi

jobs:
  create-realese:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Check KubePi
        id: check-kubepi
        run: |
          gh release view ${{ steps.get_version.outputs.VERSION }} | grep kubepi-server-*.tar.gz >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
      - name: Check Gotty
        id: check-gotty
        run: |
          gh release view ${{ steps.get_version.outputs.VERSION }} | grep gotty-*.tar.gz >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.10.0'
      - name: Build Web
        if: steps.check-kubepi.outputs.create == 1
        run: |
          make build_web
        env:
          NODE_OPTIONS: --max-old-space-size=8192
      - name: Release Binary
        if: steps.check-kubepi.outputs.create == 1
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release GoTTY
        if: steps.check-gotty.outputs.create == 1
        run: |
          make build_gotty
          rm -f dist/usr/local/bin/gotty
          cd thirdparty/gotty
          mkdir -p builds/linux-386/
          CGO_ENABLED=0 GOOS=linux GOARCH=386 go build --ldflags "-s -w" -trimpath -o builds/linux-386/gotty
          cd builds/linux-386/ && tar -czvf ../gotty-linux-386.tar.gz gotty && cd ../..
          mkdir -p builds/linux-amd64/
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build --ldflags "-s -w" -trimpath -o builds/linux-amd64/gotty
          cd builds/linux-amd64/ && tar -czvf ../gotty-linux-amd64.tar.gz gotty && cd ../..
          mkdir -p builds/linux-arm/
          CGO_ENABLED=0 GOOS=linux GOARCH=arm go build --ldflags "-s -w" -trimpath -o builds/linux-arm/gotty
          cd builds/linux-arm/ && tar -czvf ../gotty-linux-arm.tar.gz gotty && cd ../..
          mkdir -p builds/linux-arm64/
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build --ldflags "-s -w" -trimpath -o builds/linux-arm64/gotty
          cd builds/linux-arm64/ && tar -czvf ../gotty-linux-arm64.tar.gz gotty && cd ../..
          mkdir -p builds/linux-ppc64le/
          CGO_ENABLED=0 GOOS=linux GOARCH=ppc64le go build --ldflags "-s -w" -trimpath -o builds/linux-ppc64le/gotty
          cd builds/linux-ppc64le/ && tar -czvf ../gotty-linux-ppc64le.tar.gz gotty && cd ../..
          mkdir -p builds/linux-s390x/
          CGO_ENABLED=0 GOOS=linux GOARCH=s390x go build --ldflags "-s -w" -trimpath -o builds/linux-s390x/gotty
          cd builds/linux-s390x/ && tar -czvf ../gotty-linux-s390x.tar.gz gotty && cd ../..
          mkdir -p builds/linux-mips64/
          CGO_ENABLED=0 GOOS=linux GOARCH=riscv64 go build --ldflags "-s -w" -trimpath -o builds/linux-mips64/gotty
          cd builds/linux-mips64/ && tar -czvf ../gotty-linux-mips64.tar.gz gotty && cd ../..
          gh release upload ${{ steps.get_version.outputs.VERSION }} builds/gotty-*.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-image:
    needs: create-realese
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-nobuild
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPO }}:latest
            ${{ env.DOCKERHUB_REPO }}:${{ steps.get_version.outputs.VERSION }}